name: Reusable Docker Build and Push

on:
  workflow_call:
    inputs:
      workflow_name:
        description: 'Name of the calling workflow'
        required: true
        type: string
      image_name:
        description: 'Name of the Docker image to build (e.g., terrestrials/hadoop)'
        required: true
        type: string
      image_context:
        description: 'Path where the build context artifact will be downloaded'
        required: true
        type: string
      image_version:
        description: 'Version for tagging the image (e.g., 3.4.1)'
        required: true
        type: string
      build_args:
        description: 'Build arguments for the Docker image'
        required: false
        type: string
        default: ''
      platforms:
        description: 'Target platforms for the build'
        required: false
        type: string
        default: 'linux/amd64,linux/arm64'
    secrets:
      DOCKERHUB_TOKEN:
        required: true
      TELEGRAM_BOT_TOKEN:
        required: true
      TELEGRAM_CHAT_ID:
        required: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Download build context artifact
        uses: actions/download-artifact@v4
        with:
          name: build-context
          path: ${{ inputs.image_context }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: terrestrials
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Generate timestamp
        id: timestamp
        run: echo "timestamp=$(date -u +'%Y%m%d%H%M')" >> $GITHUB_OUTPUT

      - name: Extract metadata for Docker image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.image_name }}
          tags: |
            type=raw,value=${{ inputs.image_version }}-${{ steps.timestamp.outputs.timestamp }},enable={{is_default_branch}}
            type=raw,value=${{ inputs.image_version }},enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.image_context }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: ${{ inputs.build_args }}
          platforms: ${{ inputs.platforms }}
          cache-from: type=registry,ref=${{ inputs.image_name }}:latest
          cache-to: type=inline

      - name: Send notification to Telegram
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then STATUS_ICON="✅"; STATUS_TEXT="Success"; else STATUS_ICON="❌"; STATUS_TEXT="Failure"; fi
          COMMIT_HASH=$(echo "${{ github.sha }}" | cut -c1-7); REPO_NAME=$(echo "${{ github.repository }}" | sed 's/[._-]/\\&/g'); WORKFLOW_NAME=$(echo "${{ inputs.workflow_name }}" | sed 's/[._-]/\\&/g'); COMMIT_MESSAGE=$(echo "${{ github.event.head_commit.message }}" | sed 's/[._-]/\\&/g' | tr -d '\n\r');
          MESSAGE="*${STATUS_ICON} ${WORKFLOW_NAME}: ${STATUS_TEXT}*\n\n*Repository*: \`${REPO_NAME}\`\n*Commit*: \`${COMMIT_HASH}\` \- _${COMMIT_MESSAGE}_\n\n[View Workflow Run on GitHub](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})";
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" -d "text=${MESSAGE}" -d "parse_mode=MarkdownV2"